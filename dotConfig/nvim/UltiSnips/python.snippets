snippet dst
hello
endsnippet
global !p
from UltiSnips import UltiSnips_Manager
def expand_snip(snip, name):
   # line = snip.buffer[snip.line]
   snip.buffer[snip.line] = ' '*4
   snip.cursor.set(snip.line, 4)
   # snip.buffer[snip.line] = line[:snip.column] + name + line[snip.column:]
   # snip.cursor.set(snip.line, snip.column + len(name)+1)
   # UltiSnips_Manager.expand()
endglobal
post_expand "expand_snip(snip, 'dst')"
snippet src
endsnippet

snippet nt "namedtuple" b
from typing import NamedTuple
class $1(NamedTuple):
	$2: $3
endsnippet

snippet co "click.option" b
@click.option(
	"--$1",
)
endsnippet

snippet cd "click.directory" b
@click.option(
	"--$1",
	"-$2",
	type=click.Path(exists=True, file_okay=False)
)
endsnippet

snippet cc "click.command" b
#!/usr/bin/env python
import click


@click.command()
@click.option(
	"--$1",
	"-$2",
)
def main($1):
	$0


if __name__ == "__main__":
	main()
endsnippet

snippet cf "click.file" b
@click.option(
	"--$1",
	"-$2",
	type=click.File("${3:r}"),
)
endsnippet

snippet #! "#!" b
#!/usr/bin/env python

endsnippet

snippet pdb "breakpoint" b
breakpoint()
endsnippet

snippet boe "break on exception" b
try:
	${VISUAL}
except:
	from IPython.core.ultratb import AutoFormattedTB
	AutoFormattedTB(mode="Verbose", color_scheme="Linux", call_pdb=1)()
endsnippet

snippet e "click.echo" b
click.echo(${0:"$1"})
endsnippet

snippet pd "print debug" b
print(f"$1: {$1}")
endsnippet

snippet ed "echo debug" b
click.echo(f"$1: {$1}")
endsnippet

snippet md "mkdir" b
$1.mkdir(parents=True, exist_ok=True)
endsnippet

snippet ni "Not implemented" b
raise NotImplementedError()
endsnippet

snippet cl "class" b
class $1${2:($3)}:
	def __init__(self${4:, $5}):
		$0
endsnippet

snippet i "init" b
def __init__(self${4:, $5}):
	$0
endsnippet


snippet s "self.foo = foo" b
self.$1 = $1
endsnippet

snippet sg "self.foo = graph.foo" b
self.$1 = graph.$1
endsnippet

snippet b "@binding" b
from microcosm.api import binding


@binding("$1")
endsnippet

snippet gc "graph class" b
from microcosm.api import binding


@binding("$1")
class $2${3:($4)}:
	def __init__(self, graph):
		${0:pass}
endsnippet

snippet ig "init graph" b
def __init__(self, graph):
	${0:pass}
endsnippet

snippet exit "exit" b
import sys; sys.exit(1)
endsnippet

snippet ds "docstring" bm
"""
$0

"""
endsnippet
