snippet dst
hello
endsnippet
global !p
from UltiSnips import UltiSnips_Manager
def expand_snip(snip, name):
   # line = snip.buffer[snip.line]
   snip.buffer[snip.line] = ' '*4
   snip.cursor.set(snip.line, 4)
   # snip.buffer[snip.line] = line[:snip.column] + name + line[snip.column:]
   # snip.cursor.set(snip.line, snip.column + len(name)+1)
   # UltiSnips_Manager.expand()
endglobal
post_expand "expand_snip(snip, 'dst')"
snippet src
endsnippet

snippet nt "namedtuple" b
$1 = namedtuple("$1", "$0")
endsnippet

snippet co "click.option" b
@click.option(
	'--$1',
)
endsnippet

snippet cd "click.directory" b
@click.option(
	"--$1",
	"-$2",
	type=click.Path(exists=True, file_okay=False)
)
endsnippet

snippet cc "click.command" b
#!/usr/bin/env python
import click


@click.command()
@click.option(
	'--$1',
	'-$2',
)
def main($1):
	$0


if __name__ == "__main__":
	main()
endsnippet

snippet cf "click.file" b
@click.option(
	'--$1',
	'-$2',
	type=click.File('${3:r}'),
)
endsnippet

snippet #! "#!" b
#!/usr/bin/env python

endsnippet

snippet pdb "pdb.set_trace" b
import pdb; pdb.set_trace()
endsnippet

snippet e "click.echo" b
click.echo(${0:"$1"})
endsnippet

snippet pd "print debug" b
print(f"$1: {$1}")
endsnippet

snippet ni "Not implemented" b
raise NotImplementedError()
endsnippet

snippet cl "class" b
class $1(${2:object}):
	def __init__(self):
		$0
endsnippet

snippet s "self.foo = foo" b
self.$1 = $1
endsnippet
